# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
    
    steps:
    - uses: actions/checkout@v4.1.4
      with:
        fetch-depth: 0
        fetch-tags: true  # 获取所有的 Git 标签
        submodules: true  # 拉取子模块
        
    - name: Build APP
      run: |
        chmod +x ci/build.sh
        ci/build.sh ${{ matrix.c_compiler }} ${{ matrix.cpp_compiler }}

    - name: Build Env
      # Build your program with the given configuration
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          echo "Running on Linux"
          cd ${{github.workspace}}/env/redis-7.2.1 && make MALLOC=libc
        elif [ "${{ runner.os }}" == "Windows" ]; then
          echo "Running on Windows"
        fi

    - name: Pack Env
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          cp ${{github.workspace}}/env/redis-7.2.1/src/redis-server ${{github.workspace}}/bin/env
          cp ${{github.workspace}}/env/start-redis.sh ${{github.workspace}}/bin/env
          cp ${{github.workspace}}/env/stop-redis.sh ${{github.workspace}}/bin/env
        elif [ "${{ runner.os }}" == "Windows" ]; then
          move ${{github.workspace}}\bin\${{env.BUILD_TYPE}}\* ${{github.workspace}}\bin\
          rmdir ${{github.workspace}}\bin\${{env.BUILD_TYPE}}
          xcopy /S /E /I ${{github.workspace}}\env\Redis-7.0.15-Windows-x64\ ${{github.workspace}}\bin\env\
        fi    
      run: |

       
    - name: Get Tag Version
      id: tag_version
      run: echo "::set-output name=tag_version::$(git describe --tags --dirty=-dev)"

    - name: Upload Release
      uses: actions/upload-artifact@v4.3.3
      with:
        # 上传后文件的名称
        name: Caster_Service-${{ steps.tag_version.outputs.tag_version }}-ububtu-gcc
        # 上传文件的路径
        path: ${{github.workspace}}/bin/
