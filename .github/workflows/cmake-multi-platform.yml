# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true  # 获取所有的 Git 标签
        submodules: true  # 拉取子模块
        
    - uses: actions/checkout@v4
      with:
        repository: NavTool/base_third_relys
        path: rely
        submodules: true  # 拉取子模块
  

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DEVENT__LIBRARY_TYPE=STATIC
        -S ${{ github.workspace }}

    - name: Build APP
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
    - name: Build Env for Linux
      if: runner.os == 'Linux'
      run: |
        cd ${{github.workspace}}/env/redis-7.2.1 && make MALLOC=libc
        cp ${{github.workspace}}/env/redis-7.2.1/src/redis-server ${{github.workspace}}/bin/env
        cp ${{github.workspace}}/env/start-redis.sh ${{github.workspace}}/bin/env
        cp ${{github.workspace}}/env/stop-redis.sh ${{github.workspace}}/bin/env
      shell: bash

    - name: Build Env for Windows
      if: runner.os == 'Windows'
      run: |
        move ${{github.workspace}}\bin\${{env.BUILD_TYPE}}\* ${{github.workspace}}\bin\
        rmdir ${{github.workspace}}\bin\${{env.BUILD_TYPE}}
        xcopy /S /E /I ${{github.workspace}}\env\Redis-7.0.15-Windows-x64\ ${{github.workspace}}\bin\env\   
      shell: cmd

 
    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

    - name: Get tag version
      id: tag_version
      run: |
        TAG=$(git describe --tags --dirty=-dev)
        echo "latest_tag=$TAG" >> $GITHUB_ENV

    - name: Upload Release
      uses: actions/upload-artifact@v4.3.3
      with:
        # 上传后文件的名称
        name: Caster_Service-${{ env.latest_tag }}-${{ matrix.os }}-${{ matrix.c_compiler }}
        # 上传文件的路径
        path: ${{github.workspace}}/bin/
